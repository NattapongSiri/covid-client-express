{"version":3,"sources":["components/ChatMessage/watson-avatar.png","components/Header/watsondark.gif","components/Header/watsonlight.gif","components/commons/Message.ts","Context.ts","components/ChatMessage/ChatMessage-style.ts","components/ChatMessage/index.tsx","components/ChatDialog.tsx","components/Speech2Text/index.tsx","components/Speech2Text/Speech2Text-style.ts","components/Spinner/Dot.tsx","components/ChatInput/index.tsx","components/ChatInput/ChatInput-style.ts","components/commons/utilities.ts","components/Header/Header-style.ts","components/LanguageSelector/index.tsx","components/Header/index.tsx","functions/index.ts","pages/ChatPage/index.tsx","App.tsx","serviceWorker.ts","messages/index.ts","index.tsx"],"names":["module","exports","MessageState","defaultLocale","navigator","language","React","createContext","locale","light","toggleLight","setLocale","l","BubbleClass","makeStyles","theme","self","maxWidth","width","height","display","color","palette","text","primary","backgroundColor","background","paper","borderRadius","boxShadow","position","margin","zIndex","other","BubbleArrowClass","right","bottom","left","content","border","borderTop","transform","SenderClass","fontWeight","fontSize","textAlign","MsgClass","default","flexWrap","alignItems","justifyContent","FlexBreaker","root","flexBasis","ChatMessage","message","onChoose","type","useTheme","bb","after","sender","msg","breakFlex","nopadding","padding","ctx","useContext","Context","dateTimeFormatter","Intl","DateTimeFormat","year","month","day","hour","minute","second","ThemeProvider","className","Avatar","style","src","watson","Card","elevation","CardHeader","classes","subheader","titleTypographyProps","variant","Divider","CardContent","Typography","overflow","dangerouslySetInnerHTML","__html","suggestions","map","s","Button","key","uuid","onClick","label","reference","CardActions","window","open","previewUrl","CardActionArea","title","toString","state","succeed","format","timestamp","sending","warning","dark","failed","error","url_pattern","ChatDialog","messages","bottom_anchor","useRef","scrollToBottom","current","scrollIntoView","block","behavior","console","useEffect","debouncedHandleResize","_debounce","addEventListener","removeEventListener","Container","m","results","Fragment","substring","r","highlight","Date","url","urls","match","length","debug","u","i","URL","ref","STT_State","recognition","alignItem","cursor","useStyle","top","animationTimingFunction","animation","Dot","Speech2Text","onData","onStateChange","useState","undefined","setState","mediaDevices","getUserMedia","audio","then","log","SpeechRecognition","webkitSpeechRecognition","interimResults","ready","catch","err","abort","lang","internalHandling","e","prevState","start","onspeechend","onresult","transcript","Mic","InputMethod","useContainerClass","alignContent","useInputClass","flexGrow","ChatInput","locked","onSubmit","onKeyUp","onKeyDown","t","useTranslation","containerClass","inputClass","composing","setComposing","readyToSend","setReadyToSend","Keyboard","method","setMethod","debouncedComposing","timeout","debouncedState","setDebouncedState","timer","setTimeout","clearTimeout","useDebouncedState","trim","OutlinedInput","disabled","placeholder","onChange","target","value","keyCode","endAdornment","InputAdornment","Send","txt","prev","Voice","supportedLocale","LanguageSelector","FormControl","InputLabel","id","NativeSelect","inputProps","name","Object","keys","k","useSwitchClass","LightSwitch","withStyles","switchBase","opacity","track","checked","props","Switch","Header","switchClass","dark_logo","alt","light_logo","checkedIcon","icon","displayName","process","APIKEY","REACT_APP_APIKEY","CREATE_SESSION_ENDPOINT","REACT_APP_CREATE_SESSION_ENDPOINT","SEND_MSG_ENDPOINT","REACT_APP_SEND_MSG_ENDPOINT","createWASession","a","fetch","cache","headers","response","json","data","sendMessage","targetLang","body","JSON","stringify","MAX_ATTEMPT","parseInt","parse_wa_response","wa_response","wa_context","response_type","uuidv4","sanitizeHtml","context","intents","input","header","sr","result_metadata","source","link","options","o","ChatPage","sessionId","setSessionId","setMessages","historyPointer","setHistoryPointer","inputMsg","concat","retry","sendWAMessage","sourceLang","status","wa_output","result","output","generic","replied","Promise","resolve","session_id","welcome_msg","cb","new_pointer","find_earlier_user_message","find_later_user_message","darkTheme","createMuiTheme","secondary","lightTheme","App","savedLocale","localStorage","getItem","setLight","Provider","setItem","Boolean","location","hostname","i18n","use","initReactI18next","init","resources","chatDialog","lng","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.a8fc28fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/watson-avatar.d9c2b1bd.png\";","module.exports = __webpack_public_path__ + \"static/media/watsondark.942da270.gif\";","module.exports = __webpack_public_path__ + \"static/media/watsonlight.7ef19e7f.gif\";","export interface Suggestion {\n    dialog_node: string\n    internal: {\n        propensity: number\n    }\n    label: string\n    output: {\n        generic: [{\n            label: string\n            value: {\n                input: {\n                    text: string\n                }\n            }\n        }]\n    }\n    value: {\n        input: {\n            entities: []\n            intents: [{\n                intent: string\n                confidence: number\n            }]\n        },\n        suggestionId: string\n    }\n}\n\nexport enum MessageState {\n    sending,\n    failed,\n    succeed\n}\n\nexport interface Message {\n    uuid: string\n    message: string\n    type: \"self\" | string\n    timestamp: Date\n    reference?: string // for example: url of source of this message\n    previewUrl?: URL // message associate with link to be preview\n    state: MessageState\n\n    suggestions?: [{\n        uuid: string\n        label: string\n        intents?: [{\n            intent: string\n            confidence: number\n        }]\n    }]\n\n    results?: [{\n        uuid: string\n        title: string\n        highlight: string\n        url?: string\n    }]\n}","import React from 'react'\n\nexport let defaultLocale = navigator.language?navigator.language:\"en_US\"\n\nexport default React.createContext({\n    locale: defaultLocale, \n    light: false, \n    toggleLight: () => {}, \n    setLocale: (l: string)=>{}})","import {Theme} from \"@material-ui/core/styles\"\nimport { makeStyles } from \"@material-ui/styles\"\n\nexport const BubbleClass = makeStyles((theme: Theme) =>({\n    self: {\n        maxWidth: \"75vw\",\n        width: \"max-content\",\n        height: \"max-content\",\n        display: \"inline-block\",\n        color: theme.palette.text.primary,\n        backgroundColor: theme.palette.background.paper,\n        borderRadius: \"4px\",\n        boxShadow: \"2px 8px 5px #000\",\n        position: \"relative\",\n        margin: \"0 12px 0 0\",\n        zIndex: 10\n    },\n    other: {\n        maxWidth: \"75vw\",\n        width: \"max-content\",\n        height: \"max-content\",\n        display: \"inline-block\",\n        color: theme.palette.text.primary,\n        backgroundColor: theme.palette.background.paper,\n        borderRadius: \"4px\",\n        boxShadow: \"2px 8px 5px #000\",\n        position: \"relative\",\n        margin: \"0 0 0 10px\",\n        zIndex: 10\n    }\n}))\n\nexport const BubbleArrowClass = makeStyles((theme: Theme) => ({\n    self: {\n        position: \"absolute\",\n        width: 0,\n        height: 0,\n        right: \"-2px\",\n        bottom: \"40px\",\n        left: \"auto\",\n        zIndex: -1,\n        \"&:after\": {\n            content: '\"\"',\n            position: \"absolute\",\n            border: \"0 solid transparent\",\n            borderTop: `9px solid ${theme.palette.background.paper}`,\n            borderRadius: \"0 20px 0\",\n            width: \"15px\",\n            height: \"30px\",\n            transform: \"rotate(45deg) scaleY(-1)\"\n        },\n    }, \n    other: {\n        position: \"absolute\",\n        width: 0,\n        bottom: \"42px\",\n        left: \"-16px\",\n        height: 0,\n        zIndex: -1,\n        \"&:after\": {\n            content: '\"\"',\n            position: \"absolute\",\n            border: \"0 solid transparent\",\n            borderTop: `9px solid ${theme.palette.background.paper}`,\n            borderRadius: \"0 20px 0\",\n            width: \"15px\",\n            height: \"30px\",\n            transform: \"rotate(145deg)\"\n        }\n    }\n}))\n\nexport const SenderClass = makeStyles({\n    self: {\n        fontWeight: 600,\n        fontSize: \"0.7rem\",\n        color: \"#66ff99\",\n        textAlign: \"right\"\n    },\n    other: {\n        fontWeight: 600,\n        fontSize: \"0.7rem\",\n        color: \"#66ccff\",\n        textAlign: \"left\"\n    }\n})\n\nexport const MsgClass = makeStyles((theme:Theme) => ({\n    self: {\n        backgroundColor: theme.palette.background.default,\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        alignItems: \"flex-end\",\n        justifyContent: \"flex-end\",\n        margin: \"1vw 0\",\n        position: \"relative\"\n    },\n    other: {\n        backgroundColor: theme.palette.background.default,\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        alignItems: \"flex-end\",\n        justifyContent: \"flex-start\",\n        margin: \"1vw 0\",\n        position: \"relative\"\n    }\n}))\n\nexport const FlexBreaker = makeStyles({\n    root: {\n        flexBasis: \"100%\"\n    }\n})","import React, {useContext} from \"react\"\nimport { Avatar, Button, Card, CardActionArea, CardActions, CardContent, CardHeader, Divider, Typography } from \"@material-ui/core\"\nimport { Theme, ThemeProvider } from \"@material-ui/core/styles\"\nimport { makeStyles, useTheme } from \"@material-ui/styles\"\nimport watson from './watson-avatar.png'\n\nimport { Message, MessageState } from '../commons/Message'\nimport Context from '../../Context'\n\nimport { BubbleClass, BubbleArrowClass, MsgClass, SenderClass, FlexBreaker } from \"./ChatMessage-style\"\n\nexport default function ChatMessage({message, onChoose}: {message: Message, onChoose?: (msg: string) => void}) {\n    const self = message.type === \"self\"\n    const theme = useTheme<Theme>()\n    const bb = BubbleClass(theme)\n    const after = BubbleArrowClass(theme)\n    const sender = SenderClass()\n    const msg = MsgClass(theme)\n    const breakFlex = FlexBreaker()\n    const nopadding = makeStyles({root:{padding: \"1vh 2vw\"}})()\n    const ctx = useContext(Context)\n    const dateTimeFormatter = new Intl.DateTimeFormat(ctx.locale, {\n        year: 'numeric', month: 'numeric', day: 'numeric',\n        hour: 'numeric', minute: 'numeric', second: 'numeric'\n    })\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className={self?msg.self:msg.other}>\n                {!self && <Avatar style={{display:\"inline-block\"}} src={watson}/>}\n                <div className={self?bb.self:bb.other}>\n                    <Card elevation={0}>\n                        <CardHeader classes={{root: nopadding.root, subheader: self?sender.self:sender.other}} subheader={self?\"You\":\"Watson\"}  titleTypographyProps={{variant:'body2' }} />\n                        <Divider />\n                        <CardContent style={{\n                                padding: \"8px 55px 8px 14px\",\n                                margin: 0\n                            }}>\n                            <Typography style={{overflow: \"auto\"}}> \n                                <span style={{textAlign: \"left\"}} dangerouslySetInnerHTML={{__html: message.message}}/>\n                            </Typography> \n                        </CardContent>\n                        {message.suggestions && \n                            <>\n                                <Divider />\n                                <CardContent>\n                                    {message.suggestions.map(s => (\n                                        <Button\n                                            key={s.uuid} \n                                            style={{margin: \"2vmin\"}} \n                                            variant={\"outlined\"} \n                                            onClick={() => {\n                                                if (onChoose)\n                                                    onChoose(s.label)\n                                            }}\n                                        >{\n                                        s.label\n                                        }</Button>\n                                    ))}\n                                </CardContent>\n                            </>\n                        }\n                        {message.reference && \n                            <>\n                                <Divider />\n                                <CardActions>\n                                    <Button variant=\"outlined\" onClick={() => {window.open(message.reference)}}>Click to view original page</Button>\n                                </CardActions>\n                            </>\n                        }\n                        {message.previewUrl &&\n                            <>\n                                <Divider />\n                                <CardActionArea>\n                                    {\n                                    <iframe title={message.message} style={{width: \"75vw\", height: \"75vh\"}} src={message.previewUrl.toString()}/>\n                                    }\n                                    {/*\n                                    <object data={message.previewUrl.toString()} style={{width: \"75vw\", height: \"75vh\"}} type=\"text/html\">Preview is not supported</object>\n                                    */}\n                                </CardActionArea>\n                            </>\n                        }\n                    </Card>\n                    <div className={self?after.self:after.other} \n                    // Pointy tale of chat bubble\n                    />\n                </div>\n                {self && <Avatar style={{display:\"inline-block\"}} />}\n                <div className={breakFlex.root}/>\n                {message.state === MessageState.succeed &&\n                    <Typography color={\"textSecondary\"} variant={\"body2\"} display={\"block\"} style={{margin: self?\"3px 55px 1vh 0\":\"3px 0 1vh 55px\"}}>\n                        {dateTimeFormatter.format(message.timestamp)}\n                    </Typography>\n                }\n                {message.state === MessageState.sending &&\n                    <Typography variant={\"body2\"} display={\"block\"} style={{margin: self?\"3px 55px 1vh 0\":\"3px 0 1vh 55px\", color: theme.palette.type===\"dark\"?theme.palette.warning.dark:theme.palette.warning.light}}>\n                        Sending\n                    </Typography>\n                }\n                {message.state === MessageState.failed &&\n                    <Typography variant={\"body2\"} display={\"block\"} style={{margin: self?\"3px 55px 1vh 0\":\"3px 0 1vh 55px\", color: theme.palette.type===\"dark\"?theme.palette.error.dark:theme.palette.error.light}}>\n                        Failed\n                    </Typography>\n                }\n            </div>\n        </ThemeProvider>\n    )\n}","import React, {useEffect, useRef} from \"react\"\n\nimport _debounce from 'lodash.debounce'\nimport { Container } from '@material-ui/core'\n\nimport ChatMessage from './ChatMessage'\nimport { Message, MessageState } from './commons/Message'\n\n// Typical url pattern which may be part of <a href=\"url\"></a> tag.\n// It need to match only up to ending of quote.\n// If there's space in url, then it's consider invalid url.\n// If it's not contained within quote, it'll consider valid url upto first space.\nconst url_pattern = /(?<=(['\"]?))(https?:\\/\\/[^\\s]*)(?=\\1)/gi;\n\nexport default function ChatDialog({messages, style, onChoose}: {style?: React.CSSProperties, messages: Message[], onChoose?: (msg: string) => void}) {\n\n    // reference point for scrolling. It currently on bottom of this component\n    const bottom_anchor = useRef<HTMLDivElement>(null)\n\n    // utitlity function to scroll to bottom of this component\n    const scrollToBottom = () => {\n        if (bottom_anchor && bottom_anchor.current) {\n            bottom_anchor.current.scrollIntoView({ block: 'end', behavior: 'smooth' });\n        } else {\n            console.error(\"Bottom anchor reference is missing\")\n        }\n    }\n\n    // scroll to bottom when screen resize\n    useEffect(() => {\n        const debouncedHandleResize = _debounce(scrollToBottom, 80)\n    \n        window.addEventListener('resize', debouncedHandleResize)\n    \n        return () => {\n            window.removeEventListener('resize', debouncedHandleResize)\n        }\n    })\n\n    // always scroll to bottom when component is re-render\n    useEffect(() => scrollToBottom())\n\n    return (\n        <Container style={style}>\n            {messages.map((m)=> {\n                if (m.results) {\n                    // search result type of reply\n                    return (\n                        <React.Fragment key={m.uuid.substring(1)}>\n                            <ChatMessage key={m.uuid} message={m} onChoose={onChoose} />\n                            {m.results.map((r) => (\n                                <ChatMessage key={r.uuid} \n                                    message={{\n                                        uuid: r.uuid,\n                                        message: r.highlight,\n                                        type: \"Watson\",\n                                        timestamp: new Date(),\n                                        reference: r.url,\n                                        state: MessageState.succeed\n                                    }} />\n                            ))}\n                        </React.Fragment>\n                    )\n                } else {\n                    let urls = m.message.match(url_pattern)\n                    // implement #6 by replace below code chunk with new one below\n\n                    // if (m.message.startsWith(\"<a \")) {\n                    //     // link to be preview message\n                    //     let urlIdx = m.message.toLowerCase().indexOf(\"href=\\\"\") + 6\n                    //     let urlEndIdx = m.message.indexOf(\"\\\"\", urlIdx + 1)\n                        \n                    //     // not empty href attribute\n                    //     if (urlIdx < urlEndIdx) {\n                    //         let url = new URL(m.message.substring(urlIdx, urlEndIdx))\n                    //         m.previewUrl = url\n                    //     }\n\n                    //     return <ChatMessage key={m.uuid} message={m} onChoose={onChoose}/>\n                    // } else if (m.message.startsWith(\"http\")) {\n                    //     let url = new URL(m.message)\n                    //     m.message = url.hostname\n                    //     m.previewUrl = url\n                    //     return <ChatMessage key={m.uuid} message={m} onChoose={onChoose}/>\n                    // } else {\n                    //     // simple reply, may have some option for user to pick \n                    //     return <ChatMessage key={m.uuid} message={m} onChoose={onChoose}/>\n                    // }\n                    if (urls && urls.length > 0) {\n                        console.debug(\"Found following urls to be preview\", urls)\n                        return (\n                        <>\n                            <ChatMessage key={m.uuid} message={m} onChoose={onChoose}/>\n                            {urls.map((u, i) => (\n                                <ChatMessage key={m.uuid} message={{previewUrl: new URL(u), uuid: m.uuid + \"-\" + i, timestamp:new Date(), state:MessageState.succeed, message: \"\", type: \"Watson\"}} onChoose={onChoose}/>\n                            ))}\n                        </>\n                        )\n                    } else {\n                        return <ChatMessage key={m.uuid} message={m} onChoose={onChoose}/>\n                    }\n                }\n            })}\n            {/* div below is used an anchor to scroll to bottom */}\n            <div style={{width:0, height: 0, display: \"block\"}} ref={bottom_anchor}/>\n        </Container>\n    )\n}","/// <reference lib=\"dom\" />\n\nimport React, {useContext, useState, useEffect} from 'react'\nimport {Mic} from '@material-ui/icons'\nimport {useTheme} from '@material-ui/styles'\nimport useStyle from './Speech2Text-style'\nimport Dot from '../Spinner/Dot'\n\nimport Context from '../../Context'\n\nexport enum STT_State {\n    undefined,\n    start,\n    ready\n}\n\nvar recognition: any;\n\nexport default function Speech2Text({\n    onClick, \n    onData,\n    onStateChange\n}: {\n    onClick?: (e?: React.MouseEvent, state?: STT_State) => void, \n    onData?: (data: string) => void,\n    onStateChange?: (state: STT_State, prevState?: STT_State) => void\n}) {\n    let [state, setState] = useState(STT_State.undefined)\n    let ctx = useContext(Context)\n\n    // Initialize component's speech recognition only once\n    useEffect(() => {\n        var constraints = { audio: true }; \n        navigator.mediaDevices.getUserMedia(constraints).then(() => {\n            console.log(\"Mic is available\")\n\n            // Initialize SpeechRecognition\n            if (window.SpeechRecognition === undefined) {\n                const {webkitSpeechRecognition} = (window as any)\n                window.SpeechRecognition = webkitSpeechRecognition\n            }\n            \n            var SpeechRecognition = (window as any).SpeechRecognition\n\n            // no standard SpeecRecognition nor webkitSpeechRecognition available\n            if (SpeechRecognition) {\n                recognition = new SpeechRecognition()\n                recognition.interimResults = true;\n            } else {\n                console.log(\"SpeechRecognition is not supported\")\n            }\n            setState(STT_State.ready)\n        }).catch(err => {\n            console.error(err)\n        })\n\n        return () => {\n            if (recognition)\n                recognition.abort()\n        }\n    }, [])\n    \n    if (recognition)\n        recognition.lang=ctx.locale\n\n    let theme = useTheme()\n    let classes = useStyle(theme)\n\n    // handling when user click on icon to start or stop speech recognition\n    let internalHandling = (e: React.MouseEvent) => {\n        let prevState = state\n        switch (state) {\n            case STT_State.undefined:\n                console.log(\"SpeechRecognition is not available\")\n                if (onStateChange) {\n                    onStateChange(STT_State.ready, prevState)\n                }\n                break\n            case STT_State.ready:\n                console.log(\"Start recognition\")\n                recognition.start()\n                recognition.onspeechend = () => {\n                    console.log(\"End of speech detected\")\n                    // recognition.stop()\n                    setState(STT_State.ready)\n\n                    // User may already force stop but speech recognition may be not yet stop\n                    if (onStateChange) {\n                        onStateChange(STT_State.ready, STT_State.start)\n                    }\n                }\n\n                if (onData) {\n                    recognition.onresult = (e: any) => {\n                        onData(e.results[0][0].transcript)\n                    }\n                }\n                setState(STT_State.start)\n                if (onStateChange) {\n                    onStateChange(STT_State.start, prevState)\n                }\n                break\n            case STT_State.start:\n                console.log(\"Aborting recognition\")\n                recognition.abort()\n                // we don't need to fire onStateChange\n                // it's already handle by onspeechend hook at speechrecognition object\n                break\n            default:\n                console.error(\"Unknown SpeechRecognition state\")\n        }\n        if (onClick)\n            onClick(e, prevState)\n    }\n\n    return (\n        <>\n            {state === STT_State.ready &&\n                <Mic onClick={internalHandling} className={classes.root} fontSize={\"large\"}/>\n            }\n            {state === STT_State.start &&\n                <Dot onClick={internalHandling}/>\n            }\n        </>\n    )\n}","import {Theme} from '@material-ui/core/styles'\nimport {makeStyles} from \"@material-ui/styles\"\nexport default makeStyles((theme: Theme) => ({\n    root: {\n        alignItem: \"center\",\n        borderRadius: \"50%\",\n        border: \"1px solid grey\",\n        color: theme.palette.text.primary,\n        cursor: \"pointer\",\n        margin: \"0 2vw\",\n        padding: \"1vw\"\n    }\n}))","import React from 'react'\nimport {Theme} from '@material-ui/core/styles'\nimport {makeStyles, useTheme} from '@material-ui/styles'\n\nconst useStyle = makeStyles((theme: Theme) => ({\n    root: {\n        display: \"inline-block\",\n        position: \"relative\",\n        width: \"10vw\",\n        height: \"10vw\",\n        \"& div\": {\n            position: \"absolute\",\n            top: \"45%\",\n            width: \"15%\",\n            height: \"15%\",\n            borderRadius: \"50%\",\n            background: theme.palette.text.primary,\n            animationTimingFunction: \"cubic-bezier(0, 1, 1, 0)\",\n            \"&:nth-child(1)\": {\n                left: \"10%\",\n                animation: '$ldsEllipsis1 0.6s infinite'\n            },\n            \"&:nth-child(2)\": {\n                left: \"10%\",\n                animation: '$ldsEllipsis2 0.6s infinite'\n            },\n            \"&:nth-child(3)\": {\n                left: \"40%\",\n                animation: '$ldsEllipsis2 0.6s infinite'\n            },\n            \"&:nth-child(4)\": {\n                left: \"70%\",\n                animation: '$ldsEllipsis3 0.6s infinite'\n            }\n        }\n    },\n    \"@keyframes ldsEllipsis1\": {\n        \"0%\": {\n            transform: \"scale(0)\"\n        },\n        \"100%\": {\n            transform: \"scale(1)\"\n        }\n    },\n    \"@keyframes ldsEllipsis3\": {\n        \"0%\": {\n            transform: \"scale(1)\"\n        },\n        \"100%\": {\n            transform: \"scale(0)\"\n        }\n    },\n    \"@keyframes ldsEllipsis2\": {\n        \"0%\": {\n            transform: \"translate(0, 0)\"\n        },\n        \"100%\": {\n            transform: \"translate(3vw, 0)\"\n        }\n    },\n}))\n\n\nexport default function Dot({onClick}: {onClick?: (e: React.MouseEvent) => void}) {\n    let theme = useTheme() as Theme\n    let classes = useStyle(theme)\n    return (\n        <div onClick={onClick} className={classes.root}>\n            <div />\n            <div />\n            <div />\n            <div />\n        </div>\n    )\n}","import React, {useEffect, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {Container, InputAdornment, OutlinedInput, ThemeProvider, useTheme} from '@material-ui/core'\nimport {Send} from '@material-ui/icons'\nimport {makeStyles} from '@material-ui/styles'\n\nimport {ContainerClass, InputClass} from './ChatInput-style'\nimport STT, {STT_State} from '../Speech2Text'\nimport {useDebouncedState} from '../commons/utilities'\n\nconst useContainerClass = makeStyles(ContainerClass)\nconst useInputClass = makeStyles(InputClass)\n\nenum InputMethod {\n    Keyboard,\n    Voice\n}\n\nexport default function ChatInput({style, locked = false, onSubmit, onKeyUp, onKeyDown}: {style?: React.CSSProperties, locked?: boolean, onSubmit?: (msg: string) => void, onKeyUp?: (handler: (val: string) => void) => void, onKeyDown?: (handler: (val: string) => void) => void}) {\n    const theme = useTheme()\n    const {t} = useTranslation(\"chatDialog\")\n    const containerClass = useContainerClass()\n    const inputClass = useInputClass()\n    let [composing, setComposing] = useState(\"\")\n    let [readyToSend, setReadyToSend] = useState(false)\n    let [method, setMethod] = useState(InputMethod.Keyboard)\n    let debouncedComposing = useDebouncedState(composing, 100)\n\n    useEffect(() => {\n        if (readyToSend && debouncedComposing.trim().length > 0 && onSubmit) {\n            onSubmit(debouncedComposing)\n            setReadyToSend(false)\n            setComposing(\"\")\n        }\n    }, [debouncedComposing, readyToSend, onSubmit])\n    \n    return (\n        <ThemeProvider theme={theme}>\n            <Container className={containerClass.root} style={style}>\n                <OutlinedInput className={inputClass.root} \n                    disabled={locked}\n                    placeholder={t(\"inputHelper\")} \n                    onChange={(e)=>setComposing(e.target.value)} \n                    onKeyDown={(e) => {\n                        // enter key press\n                        if (e.key === 'Enter' || e.keyCode === 13) {\n                            setReadyToSend(true)\n                        } else if (e.key === 'ArrowDown' && onKeyDown) {\n                            // change current text in input to next entry in history\n                            onKeyDown(setComposing)\n                        } else if (e.key === 'ArrowUp' && onKeyUp) {\n                            // change current text in input to previous entry in history\n                            onKeyUp(setComposing)\n                        }\n                    }}\n                    value={composing} \n                    endAdornment={method === InputMethod.Keyboard && composing.trim().length > 0 &&\n                        <InputAdornment \n                            position=\"end\" \n                            style={{cursor: \"pointer\"}} \n                            onClick={() => {\n                                setReadyToSend(true)\n                            }}\n                        >\n                            <Send/>\n                        </InputAdornment>\n                    }\n                />\n                <STT \n                    onData={(txt) => setComposing(txt)} \n                    onStateChange={(state, prev)=>{\n                        if (state === STT_State.start) {\n                            setMethod(InputMethod.Voice)\n                        } else if(state === STT_State.ready && prev === STT_State.start) {\n                            // case when user click to force stop recognition\n                            setMethod(InputMethod.Keyboard)\n                            console.log(\"Auto submit user input\")\n\n                            // auto submit the recognized text\n                            setReadyToSend(true)\n                        }\n                    }\n                }/>\n            </Container>\n        </ThemeProvider>\n    )\n}","export const ContainerClass = {\n    root: {\n        alignContent: \"stretch\",\n        alignItems: \"center\",\n        display: \"flex\",\n        width: \"100vw\",\n        height: \"20vh\"\n    }\n}\n\nexport const InputClass = {\n    root: {\n        flexGrow: 1\n    }\n}","import {useEffect, useState} from 'react'\n\nexport function useDebouncedState<T>(state: T, timeout: number = 500): T {\n    let [debouncedState, setDebouncedState] = useState(state)\n\n    useEffect(() => {\n        let timer = setTimeout(() => setDebouncedState(state), timeout)\n\n        return () => clearTimeout(timer)\n    }, [state, timeout])\n\n    return debouncedState\n}","import {Theme} from '@material-ui/core/styles'\nimport {makeStyles} from \"@material-ui/styles\"\n\nexport default makeStyles((theme: Theme) => ({\n    root: {\n        display: \"block\",\n        height: \"12vh\",\n        \"& > img\": {\n            height: \"inherit\",\n            width: \"auto\",\n            display: \"inline\",\n            position: \"absolute\",\n            top: \"0\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\"\n        }\n    }\n}))","import React, {useContext} from \"react\"\nimport {FormControl, InputLabel, NativeSelect, ThemeProvider, useTheme} from \"@material-ui/core\"\nimport Context from \"../../Context\"\n\nconst supportedLocale: Record<string, string> = {\n    \"Arabic\": \"ar\",\n    \"Chinese\": \"zh\",\n    \"Dutch\": \"nl\",\n    \"French\": \"fr\",\n    \"German\": \"de\",\n    \"Japanese\": \"ja\",\n    \"Hebrew\": \"he\",\n    \"Hindi\": \"hi\",\n    \"Korea\": \"ko\",\n    \"Portuguese\": \"pt\",\n    \"Russian\": \"ru\",\n    \"Spanish\": \"es\",\n    \"Taiwan\": \"zh-TW\",\n    \"Thai\": \"th\",\n    \"US\": \"en\"\n}\n\nexport default function LanguageSelector({style}: {style?: React.CSSProperties}) {\n    const theme = useTheme()\n    const ctx = useContext(Context)\n    \n    return (\n        <ThemeProvider theme={theme}>\n            <FormControl style={{...style, width: \"10vw\"}}>\n                <InputLabel id=\"langid\" style={{color: theme.palette.text.primary}}>Language</InputLabel>\n                {/* <Autocomplete options={{supportedLocale}} getOptionLabel={(option: Record<string, string>) => option[0]} renderInput={(params: any) => <TextField {...params} variant=\"outlined\" /> }/> */}\n                <NativeSelect \n                    inputProps={{\n                        name: 'langid',\n                        id: 'langid',\n                    }} \n                    value={ctx.locale} \n                    onChange={(e)=> {ctx.setLocale(e.target.value as string)}}\n                >\n                    {Object.keys(supportedLocale).map(k=>(\n                        <option key={k} value={supportedLocale[k]}>{k}</option>\n                    ))}\n                </NativeSelect>\n            </FormControl>\n        </ThemeProvider>\n    )\n}","import React, {useContext} from 'react'\nimport {Container, Switch} from '@material-ui/core'\nimport {SwitchClassKey, SwitchProps} from '@material-ui/core/Switch'\nimport {Theme} from '@material-ui/core/styles'\nimport {makeStyles, useTheme, withStyles} from '@material-ui/styles'\nimport WbIncandescentIcon from '@material-ui/icons/WbIncandescent'\n\nimport dark_logo from './watsondark.gif'\nimport light_logo from './watsonlight.gif'\n\nimport useStyle from './Header-style'\nimport Context from '../../Context'\nimport LanguageSelector from '../LanguageSelector'\n\nconst useSwitchClass = makeStyles({\n    root: {\n        borderRadius: \"10vmin\",\n        backgroundColor: \"#444\",\n        color: \"#CCC\",\n        position: \"absolute\",\n        top: \"4vh\",\n        right: \"15vw\"\n    },\n})\n\ninterface Props extends SwitchProps {\n    classes: Partial<Record<SwitchClassKey, string>>;\n}\n\nconst LightSwitch = withStyles({\n    root: {\n        \n    },\n    switchBase: {\n        '&$checked+ $track': {\n            backgroundColor: '#888',\n            opacity: 1,\n        }\n    },\n    track: {\n        backgroundColor: \"#888\",\n        opacity: 1\n    },\n    checked: {}\n})(({classes, ...props}: Props)=> (\n    <Switch {...props}  classes={{track: classes.track, switchBase: classes.switchBase, checked: classes.checked}}/>\n))\n\nLightSwitch.displayName = \"LightSwitch\"\n\nexport default function Header() {\n    let theme = useTheme() as Theme\n    let classes = useStyle(theme)\n    let switchClass = useSwitchClass()\n    let ctx = useContext(Context)\n\n    return (\n        <Container className={classes.root}>\n            {theme.palette.type === \"dark\" &&\n                <img src={dark_logo} alt=\"IBM Watson\"/>\n            }\n            {theme.palette.type !== \"dark\" &&\n                <img src={light_logo} alt=\"IBM Watson\"/>\n            }\n            <LightSwitch \n                className={switchClass.root}\n                checked={ctx.light} \n                onChange={() => {\n                    if (ctx.toggleLight) {\n                        ctx.toggleLight()\n                    }\n                }}\n                checkedIcon={<WbIncandescentIcon style={{color:\"#FFF\"}}/>} \n                icon={<WbIncandescentIcon style={{color:\"#000\"}} />}\n            />\n            <LanguageSelector style={{position: \"absolute\", top: \"3vh\", right: \"2vw\"}} />\n        </Container>\n    )\n}","const {\n    REACT_APP_APIKEY: APIKEY, \n    REACT_APP_CREATE_SESSION_ENDPOINT: CREATE_SESSION_ENDPOINT, \n    REACT_APP_SEND_MSG_ENDPOINT: SEND_MSG_ENDPOINT\n}=process.env\n\nexport interface Intent {\n    intent: string\n    confidence: number\n}\n\nexport interface Entity {\n    entity: string\n    location: number[]\n    value: string\n    confidence?: number\n    metadata?: any\n    groups?: {\n        group: string,\n        integer: number[]\n    },\n    interpretation?: {\n        calendar_type?: string\n        datetime_link?: string\n        festival?: string\n        granularity?: string\n        range_link?: string\n        range_modifier?: string\n        relative_day?: number\n        relative_month?: number\n        relative_week?: number\n        relative_weekend?: number\n        relative_year?: number\n        specific_day?: number\n        specific_day_of_week?: string\n        specific_month?: number\n        specific_quarter?: number\n        specific_year?: number\n        numeric_value?: number\n        subtype?: string\n        part_of_day?: string\n        relative_hour?: number\n        relative_minute?: number\n        relative_second?: number\n        specific_hour?: number\n        specific_minute?: number\n        specific_second?: number\n        timezone?: string\n    },\n    alternatives?: [\n        {\n            value: string,\n            confidence: number\n        }\n    ],\n    role?: \"date_from\" | \"date_to\" | \"number_from\" | \"number_to\" | \"time_from\" | \"time_to\"\n}\n\nexport interface Message {\n    message: string\n    sourceLang: string\n    targetLang?: \"en\" | \"en-US\" // It currently support only English\n\n    sessionId?: string\n    context?: any\n    userid?: string\n    intents?: Intent[]\n    entities?: Entity[]\n}\n\nexport async function createWASession() {\n    if (CREATE_SESSION_ENDPOINT && APIKEY) {\n        let response = await fetch(CREATE_SESSION_ENDPOINT, {\n            method: \"POST\",\n            cache: 'no-cache',\n            headers: {\n                \"X-IBM-Client-Id\": APIKEY\n            }\n        })\n        let data = await response.json()\n        return data\n    } else {\n        console.error(\"Undefined messaging endpoint or APIKEY is invalid\")\n    }\n}\n\nexport async function sendMessage(message: Message) {\n    message.targetLang = \"en\"\n    if (SEND_MSG_ENDPOINT && APIKEY) {\n        let response = await fetch(SEND_MSG_ENDPOINT, {\n            method: \"POST\",\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json',\n                \"X-IBM-Client-Id\": APIKEY\n            },\n            body: JSON.stringify(message)\n        })\n\n        let data = await response.json()\n\n        return data\n    } else {\n        console.error(\"Undefined messaging endpoint or APIKEY is invalid\")\n    }\n}\n\nexport async function closeWASession(sessionId: string) {\n    if (CREATE_SESSION_ENDPOINT && APIKEY) {\n        let response = await fetch(CREATE_SESSION_ENDPOINT, {\n            method: \"POST\",\n            cache: 'no-cache',\n            headers: {\n                \"X-IBM-Client-Id\": APIKEY\n            },\n            body: `{\"sessionId\":${sessionId}}`\n        })\n        let data = await response.json()\n        return data\n    } else {\n        console.error(\"Undefined messaging endpoint or APIKEY is invalid\")\n    }\n}","import React, {useContext, useEffect, useState} from \"react\";\nimport sanitizeHtml from \"sanitize-html\"\nimport {Container} from '@material-ui/core'\nimport {Theme} from \"@material-ui/core/styles\"\nimport {makeStyles, useTheme} from \"@material-ui/styles\"\nimport {v4 as uuidv4} from 'uuid'\n\nimport { Message, MessageState } from '../../components/commons/Message'\nimport { ChatDialog, ChatInput, Header } from '../../components'\nimport {createWASession, sendMessage as sendWAMessage} from '../../functions'\nimport Context from '../../Context'\n\n// Default max_attempt is 1. Once for re-using session_id. Another for create new session_id after expired.\nconst MAX_ATTEMPT = process.env.REACT_APP_RETRY_SEND?parseInt(process.env.REACT_APP_RETRY_SEND):1\n\nconst useStyle = makeStyles((theme: Theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.default\n    }\n}))\n\n/** \n * Go through entire list of messages and find earlier message where type === \"self\"\n * and return index of that location. If there's no more such message, it return -1.\n */\nfunction find_earlier_user_message(messages: Message[], cursor: number): number {\n    // If cursor <= 0, there's no earlier message\n    for (let i = cursor - 1; i >= 0; i--) {\n        if (messages[i].type === \"self\") return i\n    }\n\n    return -1\n}\n\n/** \n * Go through entire list of messages and find later message where type === \"self\"\n * and return index of that location. If there's no more such message, it return -1.\n */\nfunction find_later_user_message(messages: Message[], cursor: number): number {\n    for (let i = cursor + 1; i < messages.length; i++) {\n        if (messages[i].type === \"self\") return i\n    }\n\n    return -1\n}\n\nfunction parse_wa_response(wa_response: any, wa_context: any): Message[] {\n    return wa_response.map((r: any) => {\n        switch (r.response_type) {\n            case \"text\":\n                return {\n                    uuid: `m${uuidv4()}`,\n                    message: sanitizeHtml(r.text),\n                    type: \"Watson\",\n                    timestamp: new Date(),\n                    context: wa_context,\n                    state: MessageState.succeed\n                }\n            case \"suggestion\":\n                return {\n                    uuid: `m${uuidv4()}`,\n                    message: r.title,\n                    type: \"Watson\",\n                    timestamp: new Date(),\n                    context: wa_context,\n                    state: MessageState.succeed,\n\n                    suggestions: r.suggestions.map((s: any) => {\n                        return {\n                            uuid: `su${uuidv4()}`,\n                            label: s.label,\n                            intents: s.value.input.intents\n                        }\n                    })\n                }\n            case \"search\":\n                return {\n                    uuid: `m${uuidv4()}`,\n                    message: r.header,\n                    type: \"Watson\",\n                    timestamp: new Date(),\n                    context: wa_context,\n                    state: MessageState.succeed,\n\n                    results: r.results.map((sr:any) => {\n                        let url = undefined\n                        if (sr.result_metadata && sr.result_metadata.source && sr.result_metadata.source.link) {\n                            url = sr.result_metadata.source.link.url\n                        } else if (sr.url) {\n                            url = sr.url\n                        }\n                        return {\n                            uuid: `se${uuidv4()}`,\n                            title: sanitizeHtml(sr.title),\n                            highlight: sanitizeHtml(sr.highlight.body[0]),\n                            url: url?sanitizeHtml(url):undefined\n                        }\n                    })\n                }\n            case \"option\":\n                return {\n                    uuid: `m${uuidv4()}`,\n                    message: r.title,\n                    type: \"Watson\",\n                    timestamp: new Date(),\n                    context: wa_context,\n                    state: MessageState.succeed,\n\n                    suggestions: r.options.map((o: any) => ({\n                        uuid: `op${uuidv4()}`,\n                        label: o.label\n                    }))\n                }\n            default:\n                return {\n                    uuid: `m${uuidv4()}`,\n                    message: \"Unsupported type of response. Please contact admin.\",\n                    type: \"Watson\",\n                    timestamp: new Date(),\n                    state: MessageState.succeed,\n                }\n        }\n    })\n}\n\nexport default function ChatPage() {\n    let theme = useTheme() as Theme\n    let style = useStyle(theme)\n    let [sessionId, setSessionId] = useState<string>()\n    let [messages, setMessages] = useState<Message[]>([])\n    let [historyPointer, setHistoryPointer] = useState(messages.length - 1);\n    let ctx = useContext(Context)\n\n    const sendMessage = async (msg: string) => {\n        // add message to chat screen first so user see that the text is sent\n        // We probably need mechanism to ensure the text is received by server\n        let inputMsg = {uuid: `m${uuidv4()}`, message: msg, type: \"self\", timestamp: new Date(), state: MessageState.sending}\n        messages = messages.concat(inputMsg)\n        setMessages(messages)\n\n        try {\n            // Fix #2\n            // if (!sessionId) {\n            //     let response = await createWASession()\n            \n            //     if (response.status === 201) {\n            //         setSessionId(response.result.session_id)\n                    \n            //         sessionId = response.result.session_id\n            //         } \n            // }\n\n            for (let retry = 0; retry <= MAX_ATTEMPT; retry++) {\n                inputMsg.state = MessageState.sending\n                let response\n\n                if (sessionId) {\n                    // reuse existing sessionId\n                    response = await sendWAMessage({\n                        sessionId,\n                        message: msg,\n                        sourceLang: ctx.locale\n                    })\n                } else {\n                    // establish new session then send a message immediately\n                    response = await sendWAMessage({\n                        message: msg,\n                        sourceLang: ctx.locale\n                    })\n                }\n                    \n                if (response.status === 200) {\n                    if (sessionId !== response.sessionId) {\n                        // Server return new session\n                        setSessionId(sessionId)\n                        // temporary put sessionId onto existing one so we don't have to wait for next render\n                        sessionId = response.sessionId\n                    }\n                    inputMsg.state = MessageState.succeed\n                    let wa_output = response.result.output\n                    let wa_context = response.result.context\n                    let wa_response = wa_output.generic\n\n                    let replied: Message[] = parse_wa_response(wa_response, wa_context)\n\n                    messages = messages.concat(...replied)\n\n                    setMessages(messages)\n                    break\n                } else {\n                    console.error(\"Fail to send message to WA server. Wait for 1 second to retry.\")\n                    await new Promise((resolve) => setTimeout(resolve, 1000))\n                    let response = await createWASession()\n\n                    if (response.status === 201) {\n                        setSessionId(response.result.session_id)\n                        // temporary put sessionId onto existing one so we don't have to wait for next render\n                        sessionId = response.result.session_id\n                    }\n                }\n            }\n            \n            if (inputMsg.state !== MessageState.succeed) {\n                inputMsg.state = MessageState.failed\n                setMessages([...messages])\n                console.error(\"Max number of retry attempted without succeed\")\n            }\n            \n        } catch (err) {\n            // some error occur, either can't establish session or fail to send WA msg\n            inputMsg.state = MessageState.failed\n            setMessages([...messages])\n            console.error(err)\n        }\n    }\n\n    useEffect(() => {\n        (async () => {\n            let failed = true\n            for (let i = 0; i <= MAX_ATTEMPT && failed; i++) {\n                // establish new session then send a message immediately\n                let response = await sendWAMessage({\n                    message: \"\",\n                    sourceLang: ctx.locale\n                })\n\n                if (response.status === 200) {\n                    failed = false\n                    setSessionId(response.sessionId)\n                    let wa_output = response.result.output\n                    let wa_context = response.result.context\n                    let wa_response = wa_output.generic\n                    \n                    let welcome_msg: Message[] = parse_wa_response(wa_response, wa_context)\n                    setMessages(welcome_msg)\n                }\n            }\n        })()\n    }, [ctx.locale, setMessages, setSessionId]);\n\n    return (\n        <Container className={style.root}>\n            <Header />\n            <ChatDialog style={{height: \"70vh\", overflow: \"scroll\", padding: \"0 0 0 0\", margin: \"0 0 0 0\"}} messages={messages} onChoose={sendMessage}/>\n            <ChatInput \n                style={{height: \"18vh\"}} \n                onSubmit={(msg) => {\n                    sendMessage(msg)\n                    setHistoryPointer(messages.length)\n                }} \n                onKeyUp={(cb) => {\n                    let new_pointer = find_earlier_user_message(messages, historyPointer)\n                    if (new_pointer >= 0) {\n                        setHistoryPointer(new_pointer)\n                        cb(messages[new_pointer].message)\n                    }\n                }}\n                onKeyDown={(cb) => {\n                    let new_pointer = find_later_user_message(messages, historyPointer)\n                    if (new_pointer >= 0) {\n                        setHistoryPointer(new_pointer)\n                        cb(messages[new_pointer].message)\n                    }\n                }}\n            />\n        </Container>\n    )\n}","import React, {useState} from 'react';\nimport \"./App.css\"\nimport ChatPage from './pages/ChatPage'\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core/styles\"\nimport Context, {defaultLocale} from './Context'\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    background: {\n      default: \"#000\"\n    },\n    text: {\n      primary: \"#FFF\",\n      secondary: \"#FFF\"\n    },\n    type: \"dark\"\n  },\n});\n\nconst lightTheme = createMuiTheme({\n  palette: {\n    background: {\n      paper: \"#FFE\"\n    },\n    type: \"light\"\n  }\n})\n\nfunction App() {\n  const savedLocale = localStorage.getItem(\"locale\")\n  let [locale, setLocale] = useState(savedLocale?savedLocale:defaultLocale)\n  let [light, setLight] = useState(localStorage.getItem(\"light\") === \"true\")\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Context.Provider \n          value={{\n            locale, \n            light, \n            toggleLight: () => {\n              localStorage.setItem(\"light\", (!light).toString())\n              setLight(!light)\n            }, \n            setLocale: (l:string)=>{\n              localStorage.setItem(\"locale\", l)\n              setLocale(l)\n            }\n          }}\n        >\n          <ThemeProvider theme={light?lightTheme:darkTheme}>\n            <ChatPage />\n          </ThemeProvider>\n        </Context.Provider>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n    \"en\": {\n        chatDialog: {\n            \"inputHelper\": \"Type your message here\"\n        }\n    }, \"th\": {\n        chatDialog: {\n            \"inputHelper\": \"พิมพ์ข้อความของคุณที่นี่\"\n        }\n    }\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport i18n from 'i18next'\nimport {initReactI18next} from 'react-i18next'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport messages from './messages'\n\nlet defaultLocale = navigator.language?navigator.language:\"en_US\"\ni18n.use(initReactI18next)\n    .init({\n      resources: messages,\n      lng: defaultLocale\n    })\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}